# 꺼내오기
input {
    jdbc {
        # ##### 1단계 방식 ##### => 매번 똑같은 데이터를 계속 가지고옴
        # jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar" # 도커안에서 찾아야함
        # jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        # jdbc_connection_string => "jdbc:mysql://my-database:3306/mydocker09"  #.env.docker 참고
        # jdbc_user => "root"
        # jdbc_password => "root"
        # # 여기까지 연결 완료
        # schedule => "* * * * *" # 얼마만큼의 주기로 실행할건지
        # statement => "select * from product" # mysql에 쿼리문으로 요청

        # ##### 2단계 방식 ##### => 시간의 소수점이 잘리는 문제 발생(정확한 비교 불가)
        # jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar" 
        # jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        # jdbc_connection_string => "jdbc:mysql://my-database:3306/mydocker09" 
        # jdbc_user => "root"
        # jdbc_password => "root"
        # schedule => "* * * * *" 
        # use_column_value => "true" # 컬럼을 사용할껀가요
        # tracking_column => "updatedat" # updatedat만 aaa.txt에 저장해주세요
        # tracking_column_type => "timestamp" // 타입
        # last_run_metadata_path => "./aaa.txt" # 마지막에 실행된 결과를 저장해주세요
        # statement => "select id, name, description, price, updatedat from product where updatedat > :sql_last_value order by updatedat asc"  # 여기선 대소문자 구분못함, updatedat 기준으로 오름차순으로 정렬
        # # where문 뜻 :지금 저장한 updatedat이 최신에 저장한거보다 크면 가져와줘

        ##### 3단계 방식 #####
        jdbc_driver_library => "/usr/share/logstash/mysql-connector-java-8.0.28.jar" 
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_connection_string => "jdbc:mysql://my-database:3306/mydockerclass09" 
        jdbc_user => "root"
        jdbc_password => "root"
        schedule => "* * * * *" 
        use_column_value => "true" 
        tracking_column => "updatedat" 
        tracking_column_type => "numeric" # 숫자타입
        last_run_metadata_path => "./aaa.txt" 
        statement => "select id, name, price, description, unix_timestamp(updatedat) as updatedat from product where unix_timestamp(updatedat) > :sql_last_value order by updatedat asc" 
        # 날짜를 unix_timestamp로 시간으로 바꾸고 as 로 이름을 다시 updatedat으로 함
    }
}

# 집어넣기
output {
    elasticsearch {
        hosts => "elasticsearch:9200"
        index => "myproduct0999"
    }
}