// =====================================================================
// graphql-API 문제
// =====================================================================
// http://backendclass.codebootcamp.co.kr/graphql 에서 제공하는 API를 사용하세요.
// =====================================================================

1) createBoard를 활용해, 게시물을 하나 등록해 주세요.
mutation{
  createBoard(createBoardInput:{
    writer:"훈",
    password:"123",
    title:"커피"
    contents:"커피커피"
  }){
    _id
    writer
    title
    contents
    likeCount
    dislikeCount
  }
}

2) 등록한 게시글의 제목과 내용은 무엇인가요?
query{
  fetchBoard(boardId:"630f48897d035600293d9858"){
    _id
    title
    contents
    likeCount
    dislikeCount
    createdAt
    updatedAt
  }
}
"title": "커피","contents": "커피커피"

3) 등록한 게시글에 좋아요를 1 올려주세요.
mutation{
  likeBoard(boardId:"630f48897d035600293d9858")
}

4) 등록한 게시글에 싫어요도 1 올려주세요.
mutation{
  dislikeBoard(boardId:"630f48897d035600293d9858")
}

5) 등록한 게시글의 좋아요와 싫어요는 각각 몇 개 인가요? 
	(fetchBoard를 활용해서 확인해 보세요.)
query{
  fetchBoard(boardId:"630f48897d035600293d9858"){
    likeCount
    dislikeCount
  }
}
1개/1개

6) 현재 등록된 게시글의 총 갯수는 몇 개 인가요? 
	(어떤 API를 활용하면 좋을지 찾아보세요!)

  query{
  fetchBoardsCount
}
121개

7) 등록한 게시글의 제목을 수정해 보세요!

mutation{
  updateBoard(updateBoardInput:{
    title:"몬스터"
  },password:"123",boardId:"630f48897d035600293d9858"){
    _id
    title
    contents
    likeCount
    dislikeCount
    createdAt
    updatedAt
  }
}

8) fetchBoards 전체 게시물 조회를 활용하여 방금 쓴 게시물을 검색해 보세요.
	(search 변수를 활용해요!)

  query{
  fetchBoards(search:"몬스터"){
    _id
    title
    contents
    likeCount
    dislikeCount
    createdAt
    updatedAt
  }
}

9) 등록한 게시글에 댓글을 3개 추가해 보세요.

mutation{
  createBoardComment(createBoardCommentInput:{
    writer:"김",
    password:"123",
    contents:"가나다라",
    rating:5.0
  },boardId:"630f48897d035600293d9858"){
    _id
    contents
    rating
    createdAt
    updatedAt
  }
}

mutation{
  createBoardComment(createBoardCommentInput:{
    writer:"상",
    password:"123",
    contents:"그그그그",
    rating:4.0
  },boardId:"630f48897d035600293d9858"){
    _id
    contents
    rating
    createdAt
    updatedAt
  }
}

mutation{
  createBoardComment(createBoardCommentInput:{
    writer:"훈",
    password:"123",
    contents:"바바바바",
    rating:3.0
  },boardId:"630f48897d035600293d9858"){
    _id
    contents
    rating
    createdAt
    updatedAt
  }
}

10) 첫번째 댓글의 내용을 수정해 보세요!

mutation{
  updateBoardComment(updateBoardCommentInput:{
    contents:"끄아아아"
    rating:10
  },password:"123",boardCommentId:"630f4f017d035600293d9864"){
    _id
    contents
    rating
    createdAt
    updatedAt
  }
}

11) 두번째 댓글을 삭제해 보세요!

mutation{
  deleteBoardComment(password:"123",boardCommentId:"630f4f257d035600293d9865")
}

12) 등록한 게시글에 달려있는 모든 댓글을 조회해 보세요.(작성자와 내용만 조회합니다.)

query{
  fetchBoardComments(boardId:"630f48897d035600293d9858"){
    _id
    contents
    rating
    createdAt
    updatedAt
  }
}

13) BEST 게시글을 조회해 보세요! (API 이름을 잘 찾아보세요!)

query{
  fetchBoardsOfTheBest{
    _id
    title
    contents
    likeCount
    dislikeCount
    createdAt
    updatedAt
  }
}

14) 회원가입을 해보세요! 사용자, 즉 User를 만드는 API입니다!

mutation{
  createUser(createUserInput:{
    email:"a@abc.com"
    password:"123"
    name:"꾸엑"
  }){
    _id
    email
    name
    createdAt
    updatedAt
  }
}